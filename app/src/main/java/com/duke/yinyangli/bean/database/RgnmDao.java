package com.duke.yinyangli.bean.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "rgnm".
*/
public class RgnmDao extends AbstractDao<Rgnm, Long> {

    public static final String TABLENAME = "rgnm";

    /**
     * Properties of entity Rgnm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rgz = new Property(1, String.class, "rgz", false, "rgz");
        public final static Property Rgxx = new Property(2, String.class, "rgxx", false, "rgxx");
        public final static Property Rgcz = new Property(3, String.class, "rgcz", false, "rgcz");
        public final static Property Rgzfx = new Property(4, String.class, "rgzfx", false, "rgzfx");
        public final static Property Xgfx = new Property(5, String.class, "xgfx", false, "xgfx");
        public final static Property Aqfx = new Property(6, String.class, "aqfx", false, "aqfx");
        public final static Property Syfx = new Property(7, String.class, "syfx", false, "syfx");
        public final static Property Cyfx = new Property(8, String.class, "cyfx", false, "cyfx");
        public final static Property Jkfx = new Property(9, String.class, "jkfx", false, "jkfx");
    }


    public RgnmDao(DaoConfig config) {
        super(config);
    }
    
    public RgnmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"rgnm\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"rgz\" TEXT," + // 1: rgz
                "\"rgxx\" TEXT," + // 2: rgxx
                "\"rgcz\" TEXT," + // 3: rgcz
                "\"rgzfx\" TEXT," + // 4: rgzfx
                "\"xgfx\" TEXT," + // 5: xgfx
                "\"aqfx\" TEXT," + // 6: aqfx
                "\"syfx\" TEXT," + // 7: syfx
                "\"cyfx\" TEXT," + // 8: cyfx
                "\"jkfx\" TEXT);"); // 9: jkfx
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"rgnm\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Rgnm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rgz = entity.getRgz();
        if (rgz != null) {
            stmt.bindString(2, rgz);
        }
 
        String rgxx = entity.getRgxx();
        if (rgxx != null) {
            stmt.bindString(3, rgxx);
        }
 
        String rgcz = entity.getRgcz();
        if (rgcz != null) {
            stmt.bindString(4, rgcz);
        }
 
        String rgzfx = entity.getRgzfx();
        if (rgzfx != null) {
            stmt.bindString(5, rgzfx);
        }
 
        String xgfx = entity.getXgfx();
        if (xgfx != null) {
            stmt.bindString(6, xgfx);
        }
 
        String aqfx = entity.getAqfx();
        if (aqfx != null) {
            stmt.bindString(7, aqfx);
        }
 
        String syfx = entity.getSyfx();
        if (syfx != null) {
            stmt.bindString(8, syfx);
        }
 
        String cyfx = entity.getCyfx();
        if (cyfx != null) {
            stmt.bindString(9, cyfx);
        }
 
        String jkfx = entity.getJkfx();
        if (jkfx != null) {
            stmt.bindString(10, jkfx);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Rgnm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rgz = entity.getRgz();
        if (rgz != null) {
            stmt.bindString(2, rgz);
        }
 
        String rgxx = entity.getRgxx();
        if (rgxx != null) {
            stmt.bindString(3, rgxx);
        }
 
        String rgcz = entity.getRgcz();
        if (rgcz != null) {
            stmt.bindString(4, rgcz);
        }
 
        String rgzfx = entity.getRgzfx();
        if (rgzfx != null) {
            stmt.bindString(5, rgzfx);
        }
 
        String xgfx = entity.getXgfx();
        if (xgfx != null) {
            stmt.bindString(6, xgfx);
        }
 
        String aqfx = entity.getAqfx();
        if (aqfx != null) {
            stmt.bindString(7, aqfx);
        }
 
        String syfx = entity.getSyfx();
        if (syfx != null) {
            stmt.bindString(8, syfx);
        }
 
        String cyfx = entity.getCyfx();
        if (cyfx != null) {
            stmt.bindString(9, cyfx);
        }
 
        String jkfx = entity.getJkfx();
        if (jkfx != null) {
            stmt.bindString(10, jkfx);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Rgnm readEntity(Cursor cursor, int offset) {
        Rgnm entity = new Rgnm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rgz
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rgxx
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rgcz
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rgzfx
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // xgfx
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // aqfx
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // syfx
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cyfx
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // jkfx
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Rgnm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRgz(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRgxx(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRgcz(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRgzfx(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXgfx(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAqfx(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSyfx(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCyfx(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJkfx(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Rgnm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Rgnm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Rgnm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
